// Code generated by MockGen. DO NOT EDIT.
// Source: ./sender.go

// Package kafka is a generated GoMock package.
package kafka

import (
	reflect "reflect"

	sarama "github.com/IBM/sarama"
	gomock "github.com/golang/mock/gomock"
)

// Mockproducer is a mock of producer interface.
type Mockproducer struct {
	ctrl     *gomock.Controller
	recorder *MockproducerMockRecorder
}

// MockproducerMockRecorder is the mock recorder for Mockproducer.
type MockproducerMockRecorder struct {
	mock *Mockproducer
}

// NewMockproducer creates a new mock instance.
func NewMockproducer(ctrl *gomock.Controller) *Mockproducer {
	mock := &Mockproducer{ctrl: ctrl}
	mock.recorder = &MockproducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockproducer) EXPECT() *MockproducerMockRecorder {
	return m.recorder
}

// SendSyncMessage mocks base method.
func (m *Mockproducer) SendSyncMessage(message *sarama.ProducerMessage) (int32, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSyncMessage", message)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SendSyncMessage indicates an expected call of SendSyncMessage.
func (mr *MockproducerMockRecorder) SendSyncMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSyncMessage", reflect.TypeOf((*Mockproducer)(nil).SendSyncMessage), message)
}
