// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package pickpoint is a generated GoMock package.
package pickpoint

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "gitlab.ozon.dev/mer_marat/homework/internal/model"
)

// Mockstorage is a mock of storage interface.
type Mockstorage struct {
	ctrl     *gomock.Controller
	recorder *MockstorageMockRecorder
}

// MockstorageMockRecorder is the mock recorder for Mockstorage.
type MockstorageMockRecorder struct {
	mock *Mockstorage
}

// NewMockstorage creates a new mock instance.
func NewMockstorage(ctrl *gomock.Controller) *Mockstorage {
	mock := &Mockstorage{ctrl: ctrl}
	mock.recorder = &MockstorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorage) EXPECT() *MockstorageMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *Mockstorage) Add(arg0 context.Context, arg1 *model.PickPoint) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockstorageMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*Mockstorage)(nil).Add), arg0, arg1)
}

// Delete mocks base method.
func (m *Mockstorage) Delete(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockstorageMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*Mockstorage)(nil).Delete), arg0, arg1)
}

// GetByID mocks base method.
func (m *Mockstorage) GetByID(arg0 context.Context, arg1 int64) (*model.PickPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*model.PickPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockstorageMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*Mockstorage)(nil).GetByID), arg0, arg1)
}

// Update mocks base method.
func (m *Mockstorage) Update(arg0 context.Context, arg1 *model.PickPoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockstorageMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*Mockstorage)(nil).Update), arg0, arg1)
}

// Mockcache is a mock of cache interface.
type Mockcache struct {
	ctrl     *gomock.Controller
	recorder *MockcacheMockRecorder
}

// MockcacheMockRecorder is the mock recorder for Mockcache.
type MockcacheMockRecorder struct {
	mock *Mockcache
}

// NewMockcache creates a new mock instance.
func NewMockcache(ctrl *gomock.Controller) *Mockcache {
	mock := &Mockcache{ctrl: ctrl}
	mock.recorder = &MockcacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockcache) EXPECT() *MockcacheMockRecorder {
	return m.recorder
}

// DeletePickPoint mocks base method.
func (m *Mockcache) DeletePickPoint(id int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeletePickPoint", id)
}

// DeletePickPoint indicates an expected call of DeletePickPoint.
func (mr *MockcacheMockRecorder) DeletePickPoint(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePickPoint", reflect.TypeOf((*Mockcache)(nil).DeletePickPoint), id)
}

// GetPickPoint mocks base method.
func (m *Mockcache) GetPickPoint(id int64) (model.PickPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPickPoint", id)
	ret0, _ := ret[0].(model.PickPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPickPoint indicates an expected call of GetPickPoint.
func (mr *MockcacheMockRecorder) GetPickPoint(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPickPoint", reflect.TypeOf((*Mockcache)(nil).GetPickPoint), id)
}

// SetPickPoint mocks base method.
func (m *Mockcache) SetPickPoint(id int64, point model.PickPoint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPickPoint", id, point)
}

// SetPickPoint indicates an expected call of SetPickPoint.
func (mr *MockcacheMockRecorder) SetPickPoint(id, point interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPickPoint", reflect.TypeOf((*Mockcache)(nil).SetPickPoint), id, point)
}

// UpdatePickPoint mocks base method.
func (m *Mockcache) UpdatePickPoint(id int64, point model.PickPoint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdatePickPoint", id, point)
}

// UpdatePickPoint indicates an expected call of UpdatePickPoint.
func (mr *MockcacheMockRecorder) UpdatePickPoint(id, point interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePickPoint", reflect.TypeOf((*Mockcache)(nil).UpdatePickPoint), id, point)
}
